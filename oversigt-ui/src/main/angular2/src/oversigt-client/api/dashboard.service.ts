/**
 * Oversigt API
 * This API provides access to all public operations of Oversigt.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Dashboard } from '../model/dashboard';
import { DashboardInfo } from '../model/dashboardInfo';
import { ErrorResponse } from '../model/errorResponse';
import { WidgetPosition } from '../model/widgetPosition';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DashboardService {

    protected basePath = 'http://localhost/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create new dashboard
     * 
     * @param dashboardId 
     * @param owner 
     * @param enabled 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDashboard(dashboardId: string, owner: string, enabled?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;
    public createDashboard(dashboardId: string, owner: string, enabled?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;
    public createDashboard(dashboardId: string, owner: string, enabled?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;
    public createDashboard(dashboardId: string, owner: string, enabled?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling createDashboard.');
        }
        if (owner === null || owner === undefined) {
            throw new Error('Required parameter owner was null or undefined when calling createDashboard.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (dashboardId !== undefined) {
            queryParameters = queryParameters.set('dashboardId', <any>dashboardId);
        }
        if (owner !== undefined) {
            queryParameters = queryParameters.set('owner', <any>owner);
        }
        if (enabled !== undefined) {
            queryParameters = queryParameters.set('enabled', <any>enabled);
        }

        let headers = this.defaultHeaders;

        // authentication (JsonWebToken) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<Dashboard>(`${this.basePath}/dashboards`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete dashboard
     * 
     * @param dashboardId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDashboard(dashboardId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDashboard(dashboardId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDashboard(dashboardId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDashboard(dashboardId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling deleteDashboard.');
        }

        let headers = this.defaultHeaders;

        // authentication (JsonWebToken) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/dashboards/${encodeURIComponent(String(dashboardId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List existing dashboards ids
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDashboardIds(observe?: 'body', reportProgress?: boolean): Observable<Array<DashboardInfo>>;
    public listDashboardIds(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DashboardInfo>>>;
    public listDashboardIds(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DashboardInfo>>>;
    public listDashboardIds(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<DashboardInfo>>(`${this.basePath}/dashboards`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read dashboard details
     * 
     * @param dashboardId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readDashboard(dashboardId: string, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;
    public readDashboard(dashboardId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;
    public readDashboard(dashboardId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;
    public readDashboard(dashboardId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling readDashboard.');
        }

        let headers = this.defaultHeaders;

        // authentication (JsonWebToken) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Dashboard>(`${this.basePath}/dashboards/${encodeURIComponent(String(dashboardId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update dashboard details
     * 
     * @param dashboardId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDashboard(dashboardId: string, body?: Dashboard, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;
    public updateDashboard(dashboardId: string, body?: Dashboard, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;
    public updateDashboard(dashboardId: string, body?: Dashboard, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;
    public updateDashboard(dashboardId: string, body?: Dashboard, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling updateDashboard.');
        }

        let headers = this.defaultHeaders;

        // authentication (JsonWebToken) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Dashboard>(`${this.basePath}/dashboards/${encodeURIComponent(String(dashboardId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update dashboard widget positions
     * 
     * @param dashboardId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWidgetPositions(dashboardId: string, body?: Array<WidgetPosition>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateWidgetPositions(dashboardId: string, body?: Array<WidgetPosition>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateWidgetPositions(dashboardId: string, body?: Array<WidgetPosition>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateWidgetPositions(dashboardId: string, body?: Array<WidgetPosition>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling updateWidgetPositions.');
        }

        let headers = this.defaultHeaders;

        // authentication (JsonWebToken) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/dashboards/${encodeURIComponent(String(dashboardId))}/positions`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
